[{"content": ".\\venv\\Scripts\\activate", "category": "Text", "timestamp": "2024-05-08 12:43:02"}, {"content": "import tkinter as tk\r\nfrom tkinter import simpledialog, messagebox, filedialog, Label, Entry, Button, Toplevel, Scrollbar, Frame, Listbox, Text, Menu, Radiobutton, Checkbutton, IntVar\r\nimport json\r\nimport os\r\nimport threading\r\nfrom datetime import datetime\r\nimport pyperclip\r\nfrom PIL import Image, ImageTk\r\n\r\n\r\n# Configuration for history size, timestamp visibility, and filter settings\r\nconfig_file = \"config.json\"\r\nif os.path.exists(config_file):\r\n    with open(config_file, \"r\") as file:\r\n        config = json.load(file)\r\nelse:\r\n    config = {\"history_size\": 10, \"show_timestamps\": True, \"filter_type\": \"All\"}\r\n\r\n\r\n# Load or initialize history\r\nhistory_file = \"clipboard_history.json\"\r\nif os.path.exists(history_file):\r\n    with open(history_file, \"r\") as file:\r\n        history = json.load(file)\r\nelse:\r\n    history = []\r\n\r\n\r\ndef save_config():\r\n    with open(config_file, \"w\") as file:\r\n        json.dump(config, file)\r\n\r\n\r\ndef categorize_content(content):\r\n    if content.startswith(\"http://\") or content.startswith(\"https://\"):\r\n        return \"URL\"\r\n    elif content.endswith((\".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\")):\r\n        return \"Image File\"\r\n    elif content.endswith((\".txt\", \".pdf\", \".doc\", \".docx\", \".md\")):\r\n        return \"Document\"\r\n    elif content.endswith((\".xlsx\", \".xls\")):\r\n        return \"Spreadsheet\"\r\n    elif content.endswith((\".wav\", \".mp3\",)):\r\n        return \"Audio File\"\r\n    elif content.endswith((\".mp4\", \".mov\", \".mkv\")):\r\n        return \"Video File\"\r\n    else:\r\n        return \"Text\"\r\n\r\n\r\ndef update_history(content, app):\r\n    category = categorize_content(content)\r\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n    item = {\"content\": content, \"category\": category, \"timestamp\": timestamp}\r\n    history.insert(0, item)  # Insert at the beginning for newest first\r\n   \r\n    # Maintain history size\r\n    if len(history) > config[\"history_size\"]:\r\n        history.pop(-1)  # Remove the oldest item\r\n   \r\n    # Save history to file\r\n    with open(history_file, \"w\") as file:\r\n        json.dump(history, file)\r\n   \r\n    # Update GUI\r\n    if app:\r\n        app.update_listbox()\r\n        if not app.lock_selection_var.get():\r\n            app.selected_index = 0  # Reset selection if not locked\r\n            app.listbox.selection_set(0)\r\n\r\n\r\ndef monitor_clipboard(app):\r\n    last_value = \"\"\r\n    while True:\r\n        current_value = pyperclip.paste()\r\n        if current_value != last_value:\r\n            last_value = current_value\r\n            print(\"Clipboard changed:\", current_value)\r\n            update_history(current_value, app)\r\n\r\n\r\nclass ClipboardApp:\r\n    def __init__(self, master):\r\n        self.master = master\r\n        master.title(\"Enhanced Clipboard Manager\")\r\n       \r\n        # Setup menu\r\n        self.menu = Menu(master)\r\n        master.config(menu=self.menu)\r\n        self.file_menu = Menu(self.menu)\r\n        self.menu.add_cascade(label=\"File\", menu=self.file_menu)\r\n        self.file_menu.add_command(label=\"Save History\", command=self.save_history)\r\n        self.file_menu.add_command(label=\"Load History\", command=self.load_history)\r\n\r\n\r\n        # Track selected index\r\n        self.selected_index = 0\r\n       \r\n        # Bind Ctrl+V for pasting\r\n        master.bind('<Control-v>', self.paste_item)\r\n\r\n\r\n        # Additional UI elements for paste planning\r\n        self.paste_plan_var = tk.StringVar(value=\"stay\")\r\n        self.paste_plan_frame = Frame(master)\r\n        self.paste_plan_frame.pack(fill=tk.X)\r\n        self.stay_radio = Radiobutton(self.paste_plan_frame, text=\"Stay\", variable=self.paste_plan_var, value=\"stay\")\r\n        self.stay_radio.pack(side=tk.LEFT)\r\n        self.up_radio = Radiobutton(self.paste_plan_frame, text=\"Up\", variable=self.paste_plan_var, value=\"up\")\r\n        self.up_radio.pack(side=tk.LEFT)\r\n        self.down_radio = Radiobutton(self.paste_plan_frame, text=\"Down\", variable=self.paste_plan_var, value=\"down\")\r\n        self.down_radio.pack(side=tk.LEFT)\r\n       \r\n        # Checkbox to lock the selection\r\n        self.lock_selection_var = IntVar()\r\n        self.lock_selection_check = Checkbutton(self.paste_plan_frame, text=\"Lock Selection\", variable=self.lock_selection_var)\r\n        self.lock_selection_check.pack(side=tk.LEFT)\r\n\r\n\r\n        # Collapsible text area for notes or drafting\r\n        self.text_frame = Frame(master, height=100)\r\n        self.text_area = Text(self.text_frame)\r\n        self.text_area.pack(fill=tk.BOTH, expand=True)\r\n        self.toggle_text_button = Button(master, text=\"Toggle Text Area\", command=self.toggle_text_area)\r\n        self.toggle_text_button.pack()\r\n\r\n\r\n        # Listbox to display clipboard items\r\n        self.listbox = Listbox(master, height=15, width=50)\r\n        self.listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10, pady=10)\r\n       \r\n        # Scrollbar for the listbox\r\n        self.scrollbar = Scrollbar(master, orient=\"vertical\", command=self.listbox.yview)\r\n        self.scrollbar.pack(side=tk.LEFT, fill=tk.Y)\r\n        self.listbox.config(yscrollcommand=self.scrollbar.set)\r\n       \r\n        # Bind double-click event for editing\r\n        self.listbox.bind('<Double-1>', self.edit_item)\r\n       \r\n        # Search bar for filtering history\r\n        self.search_var = tk.StringVar()\r\n        self.search_bar = Entry(master, textvariable=self.search_var)\r\n        self.search_bar.pack()\r\n        self.search_var.trace(\"w\", lambda name, index, mode, sv=self.search_var: self.update_listbox())\r\n       \r\n        # Image preview area\r\n        self.image_label = Label(master)\r\n        self.image_label.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)\r\n       \r\n        # Buttons for various actions\r\n        self.clear_button = tk.Button(master, text=\"Clear History\", command=self.clear_history)\r\n        self.clear_button.pack(side=tk.BOTTOM, padx=10, pady=10)\r\n       \r\n        self.settings_button = tk.Button(master, text=\"Settings\", command=self.open_settings)\r\n        self.settings_button.pack(side=tk.BOTTOM, padx=10, pady=10)\r\n       \r\n        self.exit_button = tk.Button(master, text=\"Exit\", command=master.quit)\r\n        self.exit_button.pack(side=tk.BOTTOM, padx=10, pady=10)\r\n       \r\n        # Track selected index\r\n        self.selected_index = 0\r\n\r\n\r\n        # Bind Ctrl+V for pasting\r\n        master.bind('<Control-v>', self.paste_item)\r\n\r\n\r\n        # Update the listbox with current history (moved to the end)\r\n        self.update_listbox()\r\n\r\n\r\n    def toggle_text_area(self):\r\n        if self.text_frame.winfo_viewable():\r\n            self.text_frame.pack_forget()\r\n        else:\r\n            self.text_frame.pack(fill=tk.BOTH, expand=True)\r\n\r\n\r\n    def update_listbox(self):\r\n        search_term = self.search_var.get().lower()\r\n        self.listbox.delete(0, tk.END)\r\n        for item in history:\r\n            if search_term in item['content'].lower():\r\n                display_text = f\"{item['category']}: {item['content'][:30]}... {item['timestamp'] if config['show_timestamps'] else ''}\"\r\n                self.listbox.insert(tk.END, display_text)\r\n                if item['category'] == 'Image File':\r\n                    self.display_image(item['content'])\r\n\r\n\r\n        # Ensure selection is within bounds after updating\r\n        if self.selected_index >= self.listbox.size():\r\n            self.selected_index = self.listbox.size() - 1\r\n\r\n\r\n        self.listbox.selection_clear(0, tk.END)\r\n        self.listbox.selection_set(self.selected_index)\r\n\r\n\r\n    def paste_item(self, event=None):\r\n        if history:\r\n            # Get the index of the currently selected item\r\n            self.selected_index = self.listbox.curselection()[0]\r\n            item_to_paste = history[self.selected_index]\r\n            pyperclip.copy(item_to_paste['content'])\r\n\r\n\r\n            # Update selection based on paste plan\r\n            if self.paste_plan_var.get() == \"up\" and self.selected_index > 0:\r\n                self.selected_index -= 1\r\n            elif self.paste_plan_var.get() == \"down\" and self.selected_index < self.listbox.size() - 1:\r\n                self.selected_index += 1\r\n\r\n\r\n            self.listbox.selection_clear(0, tk.END)\r\n            self.listbox.selection_set(self.selected_index)\r\n\r\n\r\n    def update_listbox(self):\r\n        search_term = self.search_var.get().lower()\r\n        self.listbox.delete(0, tk.END)\r\n        for item in history:\r\n            if search_term in item['content'].lower():\r\n                display_text = f\"{item['category']}: {item['content'][:30]}... {item['timestamp'] if config['show_timestamps'] else ''}\"\r\n                self.listbox.insert(tk.END, display_text)\r\n                if item['category'] == 'Image File':\r\n                    self.display_image(item['content'])\r\n\r\n\r\n        # Update selection based on paste plan and lock selection\r\n        if not self.lock_selection_var.get():\r\n            self.selected_index = 0\r\n        else:\r\n            if self.paste_plan_var.get() == \"up\" and self.selected_index > 0:\r\n                self.selected_index -= 1\r\n            elif self.paste_plan_var.get() == \"down\" and self.selected_index < self.listbox.size() - 1:\r\n                self.selected_index += 1\r\n\r\n\r\n        self.listbox.selection_clear(0, tk.END)\r\n        self.listbox.selection_set(self.selected_index)\r\n\r\n\r\n    def paste_item(self, event=None):\r\n        if history:\r\n            item_to_paste = history[self.selected_index]\r\n            pyperclip.copy(item_to_paste['content'])\r\n\r\n\r\n            # Update selection based on paste plan\r\n            if self.paste_plan_var.get() == \"up\" and self.selected_index > 0:\r\n                self.selected_index -= 1\r\n            elif self.paste_plan_var.get() == \"down\" and self.selected_index < self.listbox.size() - 1:\r\n                self.selected_index += 1\r\n\r\n\r\n            self.listbox.selection_clear(0, tk.END)\r\n            self.listbox.selection_set(self.selected_index)\r\n\r\n\r\n    def display_image(self, image_path):\r\n        try:\r\n            img = Image.open(image_path)\r\n            img.thumbnail((100, 100))\r\n            photo = ImageTk.PhotoImage(img)\r\n            self.image_label.config(image=photo)\r\n            self.image_label.image = photo  # keep a reference!\r\n        except Exception as e:\r\n            print(e)  # Log or handle error appropriately\r\n\r\n\r\n    def update_history(self, content, app):\r\n        category = categorize_content(content)\r\n\r\n\r\n        # Update GUI\r\n        if app:\r\n            app.update_listbox()\r\n            # Only reset selection if not locked and a new item is added\r\n            if not app.lock_selection_var.get() and content not in [item['content'] for item in history]:\r\n                app.selected_index = 0  # Reset selection if not locked and new item\r\n                app.listbox.selection_set(0)\r\n\r\n\r\n    def edit_item(self, event):\r\n        try:\r\n            index = self.listbox.curselection()[0]\r\n            item = history[index]\r\n        except IndexError:\r\n            return  # No item selected\r\n       \r\n        edit_window = Toplevel(self.master)\r\n        edit_window.title(\"Edit Item\")\r\n       \r\n        text_editor = Text(edit_window, wrap=\"word\", height=10, width=50)\r\n        text_editor.pack(padx=10, pady=10)\r\n        text_editor.insert('1.0', item['content'])\r\n       \r\n        def save_edit():\r\n            edited_content = text_editor.get('1.0', 'end-1c')\r\n            item['content'] = edited_content\r\n            update_history(item['content'], self)  # This will update the item and refresh the list\r\n            edit_window.destroy()\r\n       \r\n        save_button = Button(edit_window, text=\"Save\", command=save_edit)\r\n        save_button.pack()\r\n\r\n\r\n    def clear_history(self):\r\n        global history\r\n        history = []\r\n        with open(history_file, \"w\") as file:\r\n            json.dump(history, file)\r\n        self.update_listbox()\r\n\r\n\r\n    def open_settings(self):\r\n        self.settings_window = Toplevel(self.master)\r\n        self.settings_window.title(\"Settings\")\r\n       \r\n        Label(self.settings_window, text=\"History Size:\").pack()\r\n       \r\n        self.history_size_entry = Entry(self.settings_window)\r\n        self.history_size_entry.pack()\r\n        self.history_size_entry.insert(0, str(config[\"history_size\"]))\r\n       \r\n        Button(self.settings_window, text=\"Save\", command=self.save_settings).pack()\r\n\r\n\r\n    def paste_item(self, event=None):\r\n        if history:\r\n            # Get the index of the currently selected item (no change here)\r\n            self.selected_index = self.listbox.curselection()[0]\r\n            item_to_paste = history[self.selected_index]\r\n            pyperclip.copy(item_to_paste['content'])\r\n\r\n\r\n            # Update selection based on paste plan ONLY if not locked\r\n            if not self.lock_selection_var.get():\r\n                if self.paste_plan_var.get() == \"up\" and self.selected_index > 0:\r\n                    self.selected_index -= 1\r\n                elif self.paste_plan_var.get() == \"down\" and self.selected_index < self.listbox.size() - 1:\r\n                    self.selected_index += 1\r\n\r\n\r\n            self.listbox.selection_clear(0, tk.END)\r\n            self.listbox.selection_set(self.selected_index)\r\n\r\n\r\n    def save_settings(self):\r\n        try:\r\n            history_size = int(self.history_size_entry.get())\r\n            config[\"history_size\"] = history_size\r\n            save_config()\r\n            self.settings_window.destroy()\r\n            messagebox.showinfo(\"Settings Updated\", \"History size updated successfully!\")\r\n        except ValueError:\r\n            messagebox.showerror(\"Error\", \"Please enter a valid integer for history size.\")\r\n\r\n\r\n    def save_history(self):\r\n        filepath = filedialog.asksaveasfilename(defaultextension=\".json\", filetypes=[(\"JSON files\", \"*.json\")])\r\n        if filepath:\r\n            with open(filepath, \"w\") as file:\r\n                json.dump(history, file)\r\n            messagebox.showinfo(\"Save Successful\", \"History saved successfully!\")\r\n\r\n\r\n    def load_history(self):\r\n        filepath = filedialog.askopenfilename(filetypes=[(\"JSON files\", \"*.json\")])\r\n        if filepath:\r\n            with open(filepath, \"r\") as file:\r\n                global history\r\n                history = json.load(file)\r\n            self.update_listbox()\r\n            messagebox.showinfo(\"Load Successful\", \"History loaded successfully!\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    root = tk.Tk()\r\n    app = ClipboardApp(root)\r\n    threading.Thread(target=monitor_clipboard, args=(app,), daemon=True).start()\r\n    root.mainloop()\r\n\r\n", "category": "Text", "timestamp": "2024-05-08 12:42:15"}, {"content": "oh'", "category": "Text", "timestamp": "2024-05-08 12:39:54"}, {"content": "h", "category": "Text", "timestamp": "2024-05-08 12:38:36"}, {"content": "oh'\r\njaoh'\r\n", "category": "Text", "timestamp": "2024-05-08 12:38:33"}, {"content": "o", "category": "Text", "timestamp": "2024-05-08 12:38:28"}]